<!--- md --->

#* オペレーティングシステム 演習 03

#* スレッド

<!--- end md --->

<!--- md w --->

名前と学生証番号を書け. Enter your name and student ID.

 * 名前 Name:
 * 学生証番号 Student ID:

<!--- end md --->

<!--- md --->
# スレッド関連コマンド
<!--- end md --->

<!--- md --->
## ps auxmww

* ps は現存するプロセスを表示するコマンド
* mをつけると各プロセス内のスレッドも表示される
<!--- end md --->

<!--- md --->
* 以下によりシステムのすべてのプロセスのすべてのスレッドが表示される
* 出力が一杯になりすぎたり, そのせいでエラーになったら一旦ファイルへ出力し, そのファイルを開けば良い
* 例えば
```
ps auxmww > ps.txt
```
<!--- end md --->

<!--- code w kernel=bash --->
ps auxmww
<!--- end code --->

<!--- md --->

# POSIX Threads (Pthreads)

* PthreadはUnix共通のスレッドAPI
* 基本
  * pthread_create でスレッドを作る
  * pthread_join でスレッドの終了を待つ
  * pthread_exit で呼び出したスレッドを終了させる
  * pthread_self は呼び出したスレッドのthread IDを返す

* 以下はともかくスレッドを作ってjoinするだけの例
<!--- end md --->

<!--- code w kernel=python --->
%%writefile pthread_create.c
<!--- exec-include ./mk_version.py -DVER=1 nb/source/include/os03_thread/pthread_create.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall pthread_create.c -o pthread_create -lpthread
<!--- end code --->

<!--- code w kernel=bash --->
./pthread_create
<!--- end code --->

<!--- md --->

# スレッドに引数を渡す

* 普通スレッドを複数作ったらそれぞれに違う仕事をやらせる
* そのためにスレッドが実行する関数(開始関数)に異なる引数を渡すのが普通だが, 開始関数がvoid* (ポインタ)型の引数1つしか取れないという制限がある
```
void * f(void *) { ... }
```
* そのため通常, 構造体を作りそれへのポインタを引数として渡す
```
typedef struct { int xxx; double yyy; ... } thread_arg_t;
```
* 開始関数の方では受け取った void* 型を構造体へのポインタ変数に代入し, そこから値を取り出すのが常套手段
```
void * f(void * arg_) {
  thread_arg_t * arg = arg_;
  arg->xxx, arg->yyy, ...
}
```
* 開始関数はvoid* を受け取るが, それに構造体のポインタを渡しても問題はない

<!--- end md --->

<!--- code w kernel=python --->
%%writefile pthread_create_arg.c
<!--- exec-include ./mk_version.py -DVER=1 nb/source/include/os03_thread/pthread_create_arg.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -o pthread_create_arg pthread_create_arg.c -lpthread
<!--- end code --->

<!--- code w kernel=bash --->
./pthread_create_arg
<!--- end code --->


<!--- md --->

# スレッド vs プロセスの違い

* 違いは色々あるものの, どちらもCPUを複数使うための道具であることも確か
* 端的にその違いの挙動は
  * 「1プロセス間の複数スレッドはメモリ(変数)を共有している」
  * 「複数プロセス間ではメモリは共有されない」
という違いがある

* 特にfork()は「コピー」を作っているのであって親プロセスと子プロセスでデータ(変数)が共有されているわけではないことに注意

* 以下が違いを示す例
* 表示される結果を予想してから実行せよ

<!--- end md --->

<!--- md --->
* プロセス(fork)を使う例
<!--- end md --->

<!--- code w kernel=python --->
%%writefile thread_vs_fork_fork.c
<!--- exec-include ./mk_version.py -DVER=1 nb/source/include/os03_thread/thread_vs_fork_fork.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -o thread_vs_fork_fork thread_vs_fork_fork.c
<!--- end code --->

<!--- code w kernel=bash --->
./thread_vs_fork_fork
<!--- end code --->

<!--- md --->
* スレッド(pthread_create)を使う例
<!--- end md --->

<!--- code w kernel=python --->
%%writefile thread_vs_fork_thread.c
<!--- exec-include ./mk_version.py -DVER=1 nb/source/include/os03_thread/thread_vs_fork_thread.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -o thread_vs_fork_thread thread_vs_fork_thread.c -lpthread
<!--- end code --->

<!--- code w kernel=bash --->
./thread_vs_fork_thread
<!--- end code --->


<!--- md label=prob,ans --->
#*P pthreadの練習

以下のようなプログラムを書け.

1. 時刻をナノ秒単位で取得(Linux: clock_gettime または gettimeofday, Mac: gettimeofday; manを参照)
1. 以下を多数回($n$回)繰り返す
 * 子スレッドを作る(pthread_createを呼ぶ). 子スレッドは, 何もしない関数do_nothingを実行する
  * 親スレッドはただちに子スレッドの終了を待つ(pthread_join)
3. 時刻をナノ秒単位で取得
4. 1回あたりの時間をナノ秒単位で出力

do_nothingは以下のような関数.

```
void * do_nothing(void *) {
  return 0;
}  
```
<!--- end md --->

<!--- md label=prob,ans --->
* $n$はコマンドラインから取得できるようにする
* 以下のコードを修正して上記を達成せよ
<!--- end md --->

<!--- code w kernel=python points=1 --->
%%writefile time_pthread_create.c
<!--- exec-include ./mk_version.py -DVER=1 nb/source/include/os03_thread/time_pthread_create.c --->
<!--- end code --->

<!--- code w kernel=bash points=1 --->
gcc -O3 -Wall -Wextra -o time_pthread_create time_pthread_create.c -lpthread
<!--- end code --->

<!--- code w kernel=bash --->
./time_pthread_create
<!--- end code --->

<!--- code kernel=python label=ans --->
%%writefile time_pthread_create_ans.c
<!--- exec-include ./mk_version.py -DVER=2 nb/source/include/os03_thread/time_pthread_create.c --->
<!--- end code --->

<!--- code kernel=bash label=ans --->
gcc -Wall -o time_pthread_create_ans time_pthread_create_ans.c -lpthread
<!--- end code --->

<!--- code kernel=bash label=ans --->
./time_pthread_create_ans
<!--- end code --->

<!--- md label=prob,ans --->
* 以下のコマンドラインを色々変更して, 1回あたりの時間を計測せよ
* 正しく動いているかを確認するために, 子スレッド(do_nothing関数)で何かを表示するとか, 子スレッドのstatus (do_nothingの返り値)を変えてそれが正しく受け取れていることを確認するなどせよ
* 時間を計測するときはそれらの表示を消すこと(消さないと, 測っているのは出力時間が大半を占めることになる)
<!--- end md --->

<!--- code w kernel=bash points=1 --->
./time_pthread_create 10
<!--- end code --->

<!--- code w kernel=bash label=ans --->
./time_pthread_create_ans 1000
<!--- end code --->
