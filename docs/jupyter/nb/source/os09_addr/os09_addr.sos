<!--- md ---> 

#* オペレーティングシステム 演習 09

#* メモリとアドレス

<!--- end md ---> 

<!--- md w ---> 

名前と学生証番号を書け. Enter your name and student ID.

 * 名前 Name:
 * 学生証番号 Student ID:

<!--- end md --->

<!--- md ---> 
# 始めに

* プログラム言語の「変数」や「配列」など, 「代入して値を覚えておく」機能は, 当然のことながらコンピュータ「メモリ」を使って実現されている
* 従って当然ながら「変数」や「配列」にはメモリの中のある領域---番地(アドレス)の範囲---が対応しており, 異なる変数・配列に割り当てられている番地の範囲は重ならないようになっている(プログラミング言語処理系の役割)

# 変数・配列の番地を表示

* C/C++言語は変数や配列がどのアドレスに割り当てられているのかをあからさまに知ることが出来る<font color="blue">(&演算子)</font>
* &演算子は, 「代入文の左辺に書けるもの」に適用することが出来, 「その代入文の左辺に対応するアドレス」を意味する
  * 例えばxが変数 (e.g., int x;)なら, &x は変数xが割り当てられているアドレス. xへの代入は, そのアドレスへ値を書き込むこと(store命令)で実現される
  * なお, xが配列 (e.g., int x[10];)の場合, &を適用しなくても, つまり, xだけで, 配列xが割り当てられているアドレス(先頭要素のアドレス)という意味になる
* <font color="blue">アドレスの正体は, 機械語レベルでは単なる整数</font>であり, C/C++言語でもそれを整数として表示することも出来る
* 実用的な意味はないが, 「変数や配列にどうアドレスが対応しているか」を知るには役に立つのでそれをやってみる

## 大域変数・大域配列の場合

* C言語の大域{変数・配列}とは, ファイルのトップレベル(関数定義の外側)に書かれている変数, 配列の定義のこと

<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile global.c
<!--- exec-include ./mk_version.py -D VER=1 nb/source/include/os09_addr/global.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -o global global.c
<!--- end code --->

<!--- md ---> 

* コンパイラが「ポインタを整数として表示しようとしている」という旨の警告を出す
* 通常はそんなことはしないので警告はもっともなのだが, ここではポインタは所詮整数であることをわかった上でやっているので気にしなくて良い
* ポインタをprintfで表示するには通常`%p`を使うのだが実際には, <font color="blue">16進数で表示していると言うだけで, 表示される数自身は全く同じ</font>
* なおこの警告を消すには以下のどちらかをすれば良い
  * gccに`-Wno-format` オプションを与える
  * アドレスをprintfに渡す際にlongにキャストする`(long)&x`のように
<!--- end md --->

<!--- code w kernel=bash --->
gcc -Wall -Wno-format -o global global.c
<!--- end code --->

<!--- code w kernel=bash --->
./global
<!--- end code --->

<!--- md --->
* 結果を観察すると, cとc[50]のアドレスは200離れているはずである
  * それはint 1つのサイズ4バイトで, c[50]はcの先頭から50要素分離れたところにあることから, これは必然の結果 (4 $\times 50 = 200$)
* 同様にdとd[50]のアドレスは400離れている (double 1つのサイズ8バイト $\times 50 = 400$)
  * プログラム言語が<font color="blue">どうやって「配列」というものを実現しているのかのおおよその正体</font>がこれである
* 4つの変数と配列がどの順番に配置されているか, 間が何バイトあいているか見てみよ(どうやらd, x, c, iの順)

* <font color="purple">以下で配列の要素数や要素の型を変えるなどして, 変数のアドレス(の間の距離)がどう変化するかを観察せよ</font>

<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile global.c
<!--- exec-include ./mk_version.py -D VER=1 nb/source/include/os09_addr/global.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -Wno-format -o global global.c
<!--- end code --->

<!--- code w kernel=bash --->
./global
<!--- end code --->

<!--- md --->
* <font color="blue">注</font>
* なお, 上記のコマンドを何度も実行すると, 毎回異なるアドレスが表示される
* これは別に, はじめの実行で使われたアドレスが使われていて2回目では使えないとか, そういう理由ではなく, セキュリティのためにOSが変数のアドレスへの配置を非決定的にしている(address space randomization)から
* これを抑止するには以下のようにする. `-R`というオプションは, address space randomizationを抑止するというオプション
* これで, 何度実行しても同じアドレスが表示されるようになる
<!--- end md --->

<!--- code w kernel=bash --->
setarch $(uname -m) -R ./global
<!--- end code --->

<!--- md --->
* 同時に実行しても同じアドレスが表示される
* この仕組みは後ほど
<!--- end md --->

<!--- code w kernel=bash --->
setarch $(uname -m) -R ./global & 
setarch $(uname -m) -R ./global & 
setarch $(uname -m) -R ./global &
wait
<!--- end code --->

<!--- md ---> 

* <font color="purple">おまけ:</font> 以下のプログラムでもcの400バイト先にiがあるとすると, 以下のプログラムで何が起きるか想像して実行してみよ
* <font color="red">警告:</font> プログラムが止まらなかったらどうやって止めるのか思い出してから実行せよ (以下では保険として timeout コマンドで20秒立ったら止まるようにしている)

<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile global_quiz.c
<!--- exec-include ./mk_version.py -D VER=2 nb/source/include/os09_addr/global.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -o global_quiz global_quiz.c
<!--- end code --->

<!--- code w kernel=bash --->
timeout 20 ./global_quiz
<!--- end code --->

<!--- md ---> 

* 大域変数や配列は, プログラム起動時(プロセス立ち上げ時)にそのアドレスが定まり, その関係はそのプロセスが終了するまで変わることはない
* 言い換えればそれらの変数や配列のアドレスは常に同じであるし, それらのアドレスが他の目的に使われることはない
* これは, 大域変数や配列がそのプロセス実行中, ずっと有効であるという, 大域変数や配列の意味を考えれば頷けるものである

## 局所変数・局所配列の場合

* <font color="blue">局所変数・局所配列は, Cの文法上は, 関数定義の中で定義されているもの</font>であり, 関数の引数もそれに含まれる
* 例えば以下は上記とほぼ同じことを局所変数・配列でやってみたもの

<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile local.c
<!--- exec-include ./mk_version.py -D VER=1 nb/source/include/os09_addr/local.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -Wno-format -o local local.c
<!--- end code --->

<!--- code w kernel=bash --->
./local
<!--- end code --->

<!--- md ---> 

* 局所変数は, 大域変数のように, 名前からアドレスを一意に決めることは出来ない
* なぜならば同じ変数の名前であっても, 現れる関数が違えばそれは「異なる」(別の値を覚えさせることができる)変数だから
* 以下で同じxという変数なのに片方は10, 片方は20を「覚えている」のはそれらに別のアドレスを割り当てているからにほかならない

<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile local_fun.c
<!--- exec-include ./mk_version.py -D VER=2 nb/source/include/os09_addr/local.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -Wno-format -o local_fun local_fun.c
<!--- end code --->

<!--- code w kernel=bash --->
./local_fun
<!--- end code --->

<!--- md ---> 
* 現れる関数が違えば異なる変数というのは不正確な言い方で, 同じ関数であっても, <font color="blue">関数「呼び出し」が違えば異なる変数</font>
* 典型的には再帰呼び出しをする関数の場合
<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile local_fact.c
<!--- exec-include ./mk_version.py -D VER=3 nb/source/include/os09_addr/local.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -Wno-format -o local_fact local_fact.c
<!--- end code --->

<!--- code w kernel=bash --->
./local_fact
<!--- end code --->

<!--- md ---> 
* fact(10)がfact(9)を呼び, それがfact(8)を呼び, それがfact(7)を呼び, ... としているがそれぞれに別の領域が割り当てられているはずで, その様子は表示されているアドレス(隣り合うアドレスの差)を観察すると「なんとなく」わかるだろう
* 対比としてあえて大域変数gを導入してそのアドレスも表示している

* 以下は可視化のためのコード
<!--- end md ---> 

<!--- code w kernel=python --->
<!--- exec-include ./mk_version.py -D VER=1 nb/source/include/os09_addr/addrs_vis.py --->
<!--- end code --->

<!--- md ---> 
* 実行
<!--- end md ---> 

<!--- code w kernel=bash --->
./local_fact 20 > fact.dat
<!--- end code --->

<!--- md ---> 
* 可視化
<!--- end md ---> 

<!--- code w kernel=python --->
addrs_plt("fact.dat")
<!--- end code --->

<!--- md ---> 
* 上記の例からはfact(10) -&gt; fact(9) -&gt; ... と呼ばれていくにつれアドレスが小さくなっていくことがわかる
* このように関数を呼び出すたびに, その関数のための新しいメモリ領域が確保されていく
* その領域が<font color="blue">「スタック」</font>と呼ばれるものであり, スレッドごとに割り当てられる
* 関数を呼び出すたびに新しいアドレスを使っていったのではすぐにメモリを使い果たしてしまうので, 関数が終了(リターン)したときにその領域は開放される(次の関数呼び出しが同じ領域を使う)
* その様子がわかるのが, 以下のような, 関数を2回呼び出すような関数
<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile local_fib.c
<!--- exec-include ./mk_version.py -D VER=4 nb/source/include/os09_addr/local.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -Wno-format -o local_fib local_fib.c
<!--- end code --->

<!--- code w kernel=bash --->
./local_fib > fib.dat
<!--- end code --->

<!--- code w kernel=python --->
addrs_plt("fib.dat")
<!--- end code --->

<!--- md ---> 
# ポインタがよくわからないという人へ

* ポインタがよくわからないという人は, <font color="blue">「ポインタ」とは単純にアドレスのこと</font>だと思えば良い
* ポインタ変数 --- `char *` でも `int *` でも, `int **` でも, `void *` でも --- に入っているものは要するにアドレス, つまり整数である
* ポインタ変数`p`に対し, <font color="blue">`*p`という式はそのアドレスにロード命令を発行して取り出した値</font>のことになるし, <font color="blue">`*p = ...` という代入文はそのアドレスにストア命令を発行</font>する
* その意味ではポインタ変数はどれも似たようなもので, `char*`であろうが`int*`であろうが, アドレスはアドレス, 整数は整数, その意味ではどれも一緒である
* 違いは, 何のポインタであるかによって, `*p`としたときに何バイト分のデータを読んだり書いたりするかが違うだけである. 例えば`p`が`int *`であれば4バイト, `double *`であれば8バイト読む
* `p[i]`や`p->x`も似たようなもので, `p`が何へのポインタであるかによって, `p`から何バイト先を読むかが違う. `int*`であれば`p[i]`は `p`から$4i$番地だけ先の番地を読む(または書く)
* 以下は`*a`という式が機械語レベルでは何をしているかを示したもの
<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile pointer.c
<!--- exec-include ./mk_version.py -D VER=1 nb/source/include/os09_addr/pointer.c --->
<!--- end code --->

<!--- md --->
* 以下のコマンド(`-S`オプション)で機械語(正確にはアセンブリ言語)のコードが, pointer.s というファイルに生成される
  * `-O3` は最適化のオプションでこれを付けたほうが余計なものが生成されずわかりやすいコードになることを期待して付けている
<!--- end md --->

<!--- code w kernel=bash --->
gcc -S -O3 -Wall pointer.c
<!--- end code --->

<!--- md --->
* 以下でそれを表示
<!--- end md --->

<!--- code w kernel=bash --->
cat -n pointer.s
<!--- end code --->

<!--- md ---> 
* `movl	(%rdi), %eax`は`%rdi`レジスタに入っているアドレスから4バイト (lはlong wordの意味. Intel機械語で4バイトの意味)読み込み`%eax`に入れる
* `movq	(%rdi), %rax`は`%rdi`レジスタに入っているアドレスから8バイト (qはquad wordの意味. Intel機械語で8バイトの意味)読み込み`%rax`に入れる

* 以下は`a[i]`の場合
<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile pointer_array.c
<!--- exec-include ./mk_version.py -D VER=2 nb/source/include/os09_addr/pointer.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -S -O3 -Wall pointer_array.c
<!--- end code --->

<!--- code w kernel=bash --->
cat -n pointer_array.s
<!--- end code --->

<!--- md ---> 
* `movl	(%rdi,%rsi,4), %eax`は(`%rdi`に入っているアドレス + `%rsi` * 4)番地から4バイト読み込み, `%eax`に入れる命令
* `movq	(%rdi,%rsi,8), %rax`は(`%rdi`に入っているアドレス + `%rsi` * 8)番地から8バイト読み込み, `%rax`に入れる命令

* ポインタがよくわからないという人は, 「ポインタ」の実体は常に単なる整数(アドレス)で, `*p`, `p[i]`, `p->...`などはどれも, 適切にアドレスを計算してそこにアクセスするだけのこと, と思うのが良いのではないかと思う

* 以下は高級そうなことをしているように見えるかも知れないが, `p->next`は`p`に入っているアドレスそのもの, `p->x`は(多分)その8バイト先を読むだけのことである
* どれがfor文(ループ)に対応し, どれが`p->x`に対応し, どれが`p->next`に対応しているかを読み取ってみよ
<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile pointer_arrow.c
<!--- exec-include ./mk_version.py -D VER=3 nb/source/include/os09_addr/pointer.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -S -O3 -Wall pointer_arrow.c
<!--- end code --->

<!--- code w kernel=bash --->
cat -n pointer_arrow.s
<!--- end code --->

<!--- md ---> 
* 最後に, こんなコードに意味はないが, ポインタと整数が同じものであるということをことさら強調するために書いておく
* `movsbl 918, %eax`は紛れもなく, 918番地にある1バイトを読んで`%eax`レジスタに入れる命令
<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile pointer_is_integer.c
<!--- exec-include ./mk_version.py -D VER=4 nb/source/include/os09_addr/pointer.c --->
<!--- end code --->


<!--- code w kernel=bash --->
gcc -S -O3 -Wall pointer_is_integer.c
<!--- end code --->

<!--- code w kernel=bash --->
cat -n pointer_is_integer.s
<!--- end code --->

<!--- md ---> 
* ポインタに関して「ここがわからない」という質問を歓迎します

# メモリ領域の「寿命」

* C言語で使えるメモリとして大域変数・配列と局所変数・配列があることを見たが, 違いを端的に言うならば「いつからいつまで使えるか」が違う

|          | いつから   |いつまで    |
|----------|------------|------------|
| 大域変数 |プロセス開始|プロセス終了|
| 局所変数 |関数開始    |関数終了    |

* 両者が違うというのみならず, どちらも不自由である
* いつでも好きなときに割り当てることが出来, 好きなときに解放することが出来るメモリが必要
* それが「動的(実行時)に割り当てられるメモリ」で, 「ヒープ」と呼ばれることもある

* 以下のプログラムを実行して(わけのわからない)挙動を説明してみよ
<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile local_lifetime.c
<!--- exec-include ./mk_version.py -D VER=5 nb/source/include/os09_addr/local.c --->
<!--- end code --->


<!--- code w kernel=bash --->
gcc -Wall -o local_lifetime local_lifetime.c
<!--- end code --->

<!--- code w kernel=bash --->
./local_lifetime
<!--- end code --->

<!--- md ---> 
# ヒープ(動的に割り当てたメモリ)の番地の表示

* C言語でメモリを自由な時点で割り当てて自由な時点で開放できる --- 動的に割り当てられる --- のはmalloc/free, C++であればnew/deleteなど
* ほとんどあらゆる言語で, 呼び方(名前)は違えど提供されている
* malloとfreeの場合を上記の表に加えると以下のようになる

|          | いつから          |いつまで        |
|----------|-------------------|----------------|
| 大域変数 |プロセス開始       |プロセス終了    |
| 局所変数 |関数開始           |関数終了        |
| ヒープ   |mallocを呼んだとき |freeを呼んだとき|

* mallocはサイズ(バイト数)を与えて呼び出すと「その時空いていた領域のアドレス」を返してくれる
* アドレスを返すので, C言語では`void *`を返す

* 以下は約100MB (100000000バイト)のメモリを3回割り当てて返されたアドレスを表示する
<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile malloc.c
<!--- exec-include ./mk_version.py -D VER=1 nb/source/include/os09_addr/malloc.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -Wno-format -o malloc malloc.c
<!--- end code --->

<!--- code w kernel=bash --->
./malloc
<!--- end code --->

<!--- md ---> 
* まずは表示された3つのアドレスの間隔がほぼ100000000であることを確認せよ
* 50回割り当ててそのアドレスを可視化する
<!--- end md ---> 

<!--- code w kernel=bash --->
./malloc 50 > malloc_50.dat
<!--- end code --->

<!--- code w kernel=python --->
addrs_plt("malloc_50.dat")
<!--- end code --->

<!--- md ---> 
* freeを一切呼んでいないので, 当然毎回異なるアドレスが返されている

* 以下は, 100MBの領域を50回確保しながら, 最後の10回以外の領域はfreeしている
<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile malloc_free.c
<!--- exec-include ./mk_version.py -D VER=2 nb/source/include/os09_addr/malloc.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -Wno-format -o malloc_free malloc_free.c
<!--- end code --->

<!--- code w kernel=bash --->
./malloc_free 10 5 > malloc_10_5.dat
<!--- end code --->

<!--- code w kernel=python --->
addrs_plt("malloc_10_5.dat")
<!--- end code --->

<!--- md ---> 
# 物理メモリを越えたメモリの割当て

* ところで先のプログラムは100MBのメモリを何度も割り当てる
* 以下は 100MB x 100 = 約10GBのメモリを割り当てる
<!--- end md ---> 

<!--- code w kernel=bash --->
./malloc 100 > malloc_100.dat
<!--- end code --->

<!--- code w kernel=python --->
addrs_plt("malloc_100.dat")
<!--- end code --->

<!--- md ---> 
* 以下は 100MB x 2000 = 約200GBのメモリを割り当てる
<!--- end md ---> 

<!--- code w kernel=bash --->
./malloc 2000 > malloc_2000.dat
<!--- end code --->

<!--- code w kernel=python --->
addrs_plt("malloc_2000.dat")
<!--- end code --->

<!--- md ---> 
* Jupyter環境のサーバのメモリ搭載量は128GBだが, 200GB分のメモリ割り当てが成功している
* 成功しているのみならず非常に高速であることにも注意
* これらは, OSがメモリを要求されたときに, 実際には物理メモリを割り当てていない(要求時ページング)から可能になること
* この仕組みがOSのメモリ管理(仮想記憶)の真髄(次回)
* mallocではなく, システムコール(sbrk)を呼んでも同じことが起きる
<!--- end md ---> 

<!--- code w kernel=python --->
%%writefile sbrk.c
<!--- exec-include ./mk_version.py -D VER=3 nb/source/include/os09_addr/malloc.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -Wno-format -o sbrk sbrk.c
<!--- end code --->

<!--- code w kernel=bash --->
./sbrk 2000 > sbrk_2000.dat
<!--- end code --->

<!--- code w kernel=python --->
addrs_plt("sbrk_2000.dat")
<!--- end code --->

