<!--- md --->
# オペレーティングシステム 演習 14

#* mmapの課題
<!--- end md --->

<!--- md w --->
名前と学生証番号を書け. Enter your name and student ID.

 * 名前 Name:
 * 学生証番号 Student ID:
<!--- end md --->

<!--- md --->
# mmapを利用した高速な検索

* 整列された配列の2分探索をするbsearchというライブラリ関数がある(man bsearch参照)
* 以下は使用例 (配列aが昇順に整列されていることに注意)
<!--- end md --->

<!--- code w kernel=python --->
%%writefile bsearch.c
<!--- exec-include ./mk_version.py -D VER=1 nb/source/include/os14_mmap_app/bsearch.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -o bsearch -O3 -Wall bsearch.c
<!--- end code --->

<!--- md --->
* 実行例
<!--- end md --->

<!--- code w kernel=bash --->
./bsearch 100
./bsearch 200
./bsearch 400
./bsearch 390
<!--- end code --->

<!--- md label=prob,ans --->
* 以下で, 多数の32 bit整数が隙間なく, 256M個, 昇順に整列されたファイルを作る (512MB)
<!--- end md --->

<!--- code w kernel=python label=prob,ans --->
<!--- include nb/source/include/os14_mmap_app/mk_sorted_file.py --->
<!--- end code --->

<!--- md label=prob,ans --->
* 多少(20秒くらい)かかるが気長に待つ
<!--- end md --->

<!--- code w kernel=python label=prob,ans --->
n = 256 * 1024 * 1024
mk_sorted_file("sorted.bin", n)
<!--- end code --->

<!--- md --->
* 確認
<!--- end md --->

<!--- code w kernel=bash --->
ls -l sorted.bin
<!--- end code --->

<!--- md label=prob,ans --->
#*P mmapの有効な利用
<!--- end md --->

<!--- md --->
* ファイル名と検索したい整数Kを与えられ, その整数がファイル中にあれば,
```
193659 found at 25850-th element
```
のように, その数(193659)がファイル中の何番目(最初の数を0-th elementとする)であるかを表示し, なければ,
```
19365 not found
```
のように, ないと答えるプログラムを, mmapをbsearchを有効に用いて書け
* マニュアルページなどを参照しながら必要な ヘッダファイルを #include して, 一から書いてみよ
<!--- end md --->

<!--- code w kernel=python points=1 --->
%%writefile mmap_bsearch.c
<!--- exec-include ./mk_version.py -D VER=1 nb/source/include/os14_mmap_app/mmap_bsearch.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -o mmap_bsearch -Wall -O3 mmap_bsearch.c
<!--- end code --->

<!--- md --->
* テスト
<!--- end md --->

<!--- code w kernel=bash --->
data=sorted.bin
if /usr/bin/time ./mmap_bsearch ${data} 362382304 | grep "362382304 found at 241618944-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch ${data} 322162113 | grep "322162113 found at 214802432-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch ${data} 281936687 | grep "281936687 found at 187985920-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch ${data} 241713801 | grep "241713801 found at 161169408-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch ${data} 362382307 | grep "362382307 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch ${data} 322162115 | grep "322162115 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch ${data} 281936688 | grep "281936688 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch ${data} 241713802 | grep "241713802 not found" ; then echo OK ; else echo NG ; fi
<!--- end code --->

<!--- code kernel=python label=ans --->
%%writefile mmap_bsearch_ans.c
<!--- exec-include ./mk_version.py -D VER=2 nb/source/include/os14_mmap_app/mmap_bsearch.c --->
<!--- end code --->

<!--- code w kernel=bash label=ans --->
gcc -o mmap_bsearch_ans -Wall -O3 mmap_bsearch_ans.c
<!--- end code --->

<!--- code w kernel=bash label=ans --->
data=sorted.bin
if /usr/bin/time ./mmap_bsearch_ans ${data} 362382304 | grep "362382304 found at 241618944-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch_ans ${data} 322162113 | grep "322162113 found at 214802432-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch_ans ${data} 281936687 | grep "281936687 found at 187985920-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch_ans ${data} 241713801 | grep "241713801 found at 161169408-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch_ans ${data} 362382307 | grep "362382307 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch_ans ${data} 322162115 | grep "322162115 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch_ans ${data} 281936688 | grep "281936688 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./mmap_bsearch_ans ${data} 241713802 | grep "241713802 not found" ; then echo OK ; else echo NG ; fi
<!--- end code --->

<!--- md label=prob,ans --->
#*P readで2分探索
<!--- end md --->

<!--- md --->
同じ仕様のプログラムを, 「read関数でファイルを大きな配列に全て読み込み, その配列をbsearchで探索する」という方法でも実装せよ
<!--- end md --->

<!--- code w kernel=python points=1 --->
%%writefile read_bsearch.c
<!--- exec-include ./mk_version.py -D VER=3 nb/source/include/os14_mmap_app/mmap_bsearch.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -o read_bsearch -Wall -O3 read_bsearch.c
<!--- end code --->

<!--- code w kernel=bash --->
data=sorted.bin
if /usr/bin/time ./read_bsearch ${data} 362382304 | grep "362382304 found at 241618944-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch ${data} 322162113 | grep "322162113 found at 214802432-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch ${data} 281936687 | grep "281936687 found at 187985920-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch ${data} 241713801 | grep "241713801 found at 161169408-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch ${data} 362382307 | grep "362382307 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch ${data} 322162115 | grep "322162115 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch ${data} 281936688 | grep "281936688 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch ${data} 241713802 | grep "241713802 not found" ; then echo OK ; else echo NG ; fi
<!--- end code --->

<!--- code kernel=python label=ans --->
%%writefile read_bsearch_ans.c
<!--- exec-include ./mk_version.py -D VER=4 nb/source/include/os14_mmap_app/mmap_bsearch.c --->
<!--- end code --->

<!--- code w kernel=bash label=ans --->
gcc -o read_bsearch_ans -Wall -O3 read_bsearch_ans.c
<!--- end code --->

<!--- code w kernel=bash label=ans --->
data=sorted.bin
if /usr/bin/time ./read_bsearch_ans ${data} 362382304 | grep "362382304 found at 241618944-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch_ans ${data} 322162113 | grep "322162113 found at 214802432-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch_ans ${data} 281936687 | grep "281936687 found at 187985920-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch_ans ${data} 241713801 | grep "241713801 found at 161169408-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch_ans ${data} 362382307 | grep "362382307 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch_ans ${data} 322162115 | grep "322162115 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch_ans ${data} 281936688 | grep "281936688 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./read_bsearch_ans ${data} 241713802 | grep "241713802 not found" ; then echo OK ; else echo NG ; fi
<!--- end code --->

<!--- md label=prob,ans --->
#*P 線形探索

同じ仕様のプログラムを, 「read関数でファイルを先頭から一定数読んでは, 与えられた値と比較する」ことでも実装せよ
<!--- end md --->

<!--- code w kernel=python points=1 --->
%%writefile lin_search.c
<!--- exec-include ./mk_version.py -D VER=5 nb/source/include/os14_mmap_app/mmap_bsearch.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -o lin_search -Wall -O3 lin_search.c
<!--- end code --->

<!--- code w kernel=bash --->
data=sorted.bin
if /usr/bin/time ./lin_search ${data} 362382304 | grep "362382304 found at 241618944-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search ${data} 322162113 | grep "322162113 found at 214802432-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search ${data} 281936687 | grep "281936687 found at 187985920-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search ${data} 241713801 | grep "241713801 found at 161169408-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search ${data} 362382307 | grep "362382307 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search ${data} 322162115 | grep "322162115 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search ${data} 281936688 | grep "281936688 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search ${data} 241713802 | grep "241713802 not found" ; then echo OK ; else echo NG ; fi
<!--- end code --->

<!--- code kernel=python label=ans --->
%%writefile lin_search_ans.c
<!--- exec-include ./mk_version.py -D VER=6 nb/source/include/os14_mmap_app/mmap_bsearch.c --->
<!--- end code --->

<!--- code w kernel=bash label=ans --->
gcc -o lin_search_ans -Wall -O3 lin_search_ans.c
<!--- end code --->

<!--- code w kernel=bash label=ans --->
data=sorted.bin
if /usr/bin/time ./lin_search_ans ${data} 362382304 | grep "362382304 found at 241618944-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search_ans ${data} 322162113 | grep "322162113 found at 214802432-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search_ans ${data} 281936687 | grep "281936687 found at 187985920-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search_ans ${data} 241713801 | grep "241713801 found at 161169408-th element" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search_ans ${data} 362382307 | grep "362382307 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search_ans ${data} 322162115 | grep "322162115 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search_ans ${data} 281936688 | grep "281936688 not found" ; then echo OK ; else echo NG ; fi
if /usr/bin/time ./lin_search_ans ${data} 241713802 | grep "241713802 not found" ; then echo OK ; else echo NG ; fi
<!--- end code --->

<!--- md label=prob --->
#*P 速度比較

mmap_bsearch, read_bsearch, lin_search の3つのプログラムを, 実行速度の観点で比較せよ. つまり, (大きなデータに対して)速いと思われる順を 理由とともに述べよ. 実際に実験して確認してみよ

<!--- end md --->

<!--- md w points=1 --->

<!--- end md --->

<!--- md label=prob --->
#*P メモリ使用量比較

mmap_bsearch, read_bsearch, lin_search の3つのプログラムを, メモリ消費量の観点で比較せよ. ファイルが一切キャッシュされていない状態で各プログラムを一度起動した際, 最大でどのくらいのメモリが消費されるか, を比較せよ.

<!--- end md --->

<!--- md w points=1 --->

<!--- end md --->

