<!--- md ---> 

#* オペレーティングシステム 演習 05

#* Linux CFSスケジューラ, vruntime

<!--- end md --->

<!--- md w --->

名前と学生証番号を書け. Enter your name and student ID.

 * 名前 Name:
 * 学生証番号 Student ID:

<!--- end md --->

<!--- md --->
# Linux CFSスケジューラ
<!--- end md --->

<!--- md --->

* OSによるスケジューリングの基本
  * 中断しているスレッドと実行可能なスレッドを区別する
  * 実行可能なスレッドに公平にCPU時間を割り当てる

* 公平にCPU時間を割り当てる方法は色々あるがLinux のデフォルトスケジューラである, Complete Fair Scheduler (CFS) はCPUの利用時間累計を記録して, スレッド切り替え(実行中スレッドが中断した, 中断中スレッドが復帰した, タイマ割り込みがおきたなど)のタイミングで, それが最も少ないものに割り当てるという自然なもの
* CFSではCPUの利用時間累計を, スレッドごとに vruntime という変数を割り当てて管理してる. すなわち使ったCPU時間だけvruntimeを加算し, 次に実行するスレッドを選ぶときにvruntime最小のスレッドにCPU時間を割り当てるのがCFSの基本である
* しかしvruntimeに文字通りのCPU利用時間累計を記録していくと, 生まれたばかりのスレッドはvruntime=0, また, ほとんどCPUを使わずにずっと中断していたスレッドも vruntime $\approx$ 0ということになり, それらのスレッドが急に計算を始めると, それらに長時間CPUが連続して割り当てられる(すでにCPUを10秒消費しているスレッドには10秒間順番がまわってこない)ということになりかねない
* したがってvruntimeは以下のような管理がなされる

1. 親スレッドAが子スレッドBを生成した時, BはAのvruntimeを引き継ぐ (プロセスの場合も同様)
   Bのvruntime = Aのvruntime
2. 実行中のスレッドAから別のスレッドBに実行が切り替わる(コンテクストスイッチ)時
   Aのvruntime += Aが今回消費した時間
3. 中断中のスレッドAが復帰する時
   Aのvruntime += max(Aのvruntime, min { tのvruntime | t : 実行可能なスレッド})

<!--- end md --->

<!--- md --->

* 以下のプログラムはvruntimeをずっと観測し続け, 時間とともにどう変化したかを記録する
* 以下が実際のCコード

<!--- end md --->

<!--- code w kernel=python points=1 --->
%%writefile vruntime_rec.c
<!--- exec-include ./mk_version.py -DVER=1 nb/source/include/os05_vruntime/vruntime_rec.c --->
<!--- end code --->

<!--- code w kernel=bash points=1 --->
gcc -Wall -o vruntime_rec vruntime_rec.c
<!--- end code --->

<!--- md --->

* 以下は1秒ほど, 単独で走らせてみて, 出力の最初の10行を表示する例
* 出力1行の読み方は以下
```
プロセスID CPU番号 区間開始時刻  区間終了時刻  区間の長さ その間のvruntime
```
* 各行は, vruntimeが変わらなかった区間を表している

<!--- end md --->

<!--- code w kernel=bash --->
taskset -c 2 ./vruntime_rec 3 > vr.0
head vr.0
<!--- end code --->

<!--- md ---> 

* なお以下の taskset -c 2 は processor (仮想コア) 2番 だけで実行せよという指示
* これはそのスレッドが1つの仮想コアでしか実行されないようにするための仕掛け(2番であることには意味はない)
* vruntime はprocessorごとに別々に管理されているため, スレッドがprocessor間を移動するとvruntimeは急に変化する(それはそれで見ておくと良い)

<!--- end md ---> 

<!--- md ---> 

# 可視化

* 以下が結果を可視化するプログラム

<!--- end md ---> 

<!--- code w kernel=python --->
<!--- include nb/source/include/os05_vruntime/vruntime_vis.py --->
<!--- end code ---> 

<!--- md --->

* 以下で実際に可視化

<!--- end md --->

<!--- code w kernel=python points=1 --->
vruntime_vis(["vr.0"])
<!--- end code --->

<!--- md --->
* 特定の領域を可視化するには, `start_t=開始時刻, end_t=終了時刻` を与える
* 一見して連続的に変化しているように見えるが, 狭い範囲をどんどん拡大してみると, 区間ごとに一定で, それが定期的に, 階段状に増加していることがわかる
* 以下の引数を変更して小さな区間を拡大表示してみよ

* 下記を実行するとvruntime.svgというSVG (ベクタ画像)ファイルが生成されるので, ある程度まで拡大表示した画像をダウンロードして適当な画像ビューアで拡大しても良い

<!--- end md --->

<!--- code w kernel=python --->
vruntime_vis(["vr.0"], start_t=1.0, end_t=1.5)
<!--- end code --->

<!--- md --->
# taskset でスレッドをprocessorに固定しない場合

* taskset でスレッドを特定のprocessorに固定しない場合, スレッドがprocessor間を動き回れるようになる
* 実際にスレッドがprocessor間を移動するかはわからないが, 途中でvruntime値が大きくジャンプしたらそれはおそらくprocessor (仮想コア)間をスレッドが移動したとき

<!--- end md --->

<!--- code w kernel=bash points=1 --->
./vruntime_rec 3 > vr.0
<!--- end code --->

<!--- code w kernel=python points=1 --->
vruntime_vis(["vr.0"])
# vruntime_vis(["vr.0"], start_t=1.0, end_t=1.5)
<!--- end code ---> 

<!--- md --->

# 複数のスレッドがいる場合

* 以下はシェルスクリプトで同時に4個, 3秒間このプロセスを走らせ, 結果はファイル vr.0, vr.1, vr.2, vr.3 に記録したもの
* tasksetコマンドですべて同じprocessor (仮想コア) で実行するようにしている

<!--- end md --->

<!--- code w kernel=bash points=1 --->
for i in $(seq 0 3); do
  taskset -c 2 ./vruntime_rec 3 > vr.${i} &
done
wait
<!--- end code --->

<!--- md --->

* 実行し終えたら再び可視化せよ
* 適切に短い区間を拡大表示するなどして4つのプロセスのvruntimeがどのように増えていくかを観察せよ

<!--- end md --->

<!--- code w kernel=python ---> 
vruntime_vis(["vr.0", "vr.1", "vr.2", "vr.3"])
#vruntime_vis(["vr.0", "vr.1", "vr.2", "vr.3"], start_t=1.0, end_t=1.5)
<!--- end code ---> 

<!--- md --->
* なお, プロセス数が多いときにも通用するもう少しスマートな書き方は以下 (これは純粋にPythonの話)
<!--- end md --->

<!--- code w kernel=python ---> 
vruntime_vis([f"vr.{i}" for i in range(4)])
#vruntime_vis([f"vr.{i}" for i in range(4)], start_t=1.0, end_t=1.5)
<!--- end code ---> 

<!--- md --->

# Blockしている間はvruntimeは増えない

* 「vruntimeはCPUを使っていない時間は増えない」ことを確かめるために, 先のプログラムを少し走っては少し休むように変更したものが以下

```
./vruntime_rec_slp T R S
```

とすると, 「R秒走ってS秒sleepする」を, 合計T秒間繰り返す

<!--- end md --->

<!--- code w kernel=python points=1 --->
%%writefile vruntime_rec_slp.c
<!--- exec-include ./mk_version.py -DVER=2 nb/source/include/os05_vruntime/vruntime_rec.c --->
<!--- end code --->

<!--- code w kernel=bash points=1 --->
gcc -Wall -o vruntime_rec_slp vruntime_rec_slp.c
<!--- end code --->

<!--- md --->
* 実行
<!--- end md --->

<!--- code w kernel=bash points=1 --->
taskset -c 2 ./vruntime_rec_slp 3 0.2 0.1 > vr.0
<!--- end code --->

<!--- md --->
* vruntime可視化
<!--- end md --->

<!--- code w kernel=python --->
vruntime_vis(["vr.0"])
#vruntime_vis(["vr.0"], start_t=1.0, end_t=1.5)
<!--- end code ---> 

<!--- md --->

* ずっとCPUを使っているスレッドの傍ら, 少し走っては少しsleepを繰り返すスレッドがいた場合, 後者がsleepから目覚めたときのvruntimeには何が起きているか
* 以下は
  * 0.2秒走って0.1秒sleep する (./vruntime_rec_slp 3 0.2 0.1) を1つと
  * ずっと走る (./vruntime_rec_slp 3 3 0) を3つ
同時に走らせる

<!--- end md --->

<!--- code w kernel=bash --->
for i in $(seq 0 3); do
  if [ ${i} = 0 ]; then
    taskset -c 2 ./vruntime_rec_slp 3 0.2 0.1 ;
  else
    taskset -c 2 ./vruntime_rec_slp 3 3 0 ;
  fi > vr.${i} &
done
wait
<!--- end code --->

<!--- md --->
* 可視化
<!--- end md --->

<!--- code w kernel=python ---> 
vruntime_vis([f"vr.{i}" for i in range(4)])
#vruntime_vis([f"vr.{i}" for i in range(4)], start_t=1.0, end_t=1.5)
<!--- end code ---> 


<!--- md --->
# niceの効果

* niceというコマンドならびにシステムコールがある
* プロセスの「nice値」を決めるもので, nice値が高い = 他のプロセスに実行をよく譲る(だからnice) = 優先度を非掬するというもの

```
nice -19 コマンド
```

は「コマンド」の「nice値」を19 (最大)にする. 同名のシステムコールもある.

* デフォルトのnice値は0. 正の値は多少なりとも優先度を下げるという意味になる

* nice値大きいプロセスと普通のプロセスが並走すると, ほとんどの時間を後者が消費するようになる

* CFSスケジューラでniceがどのように実現されているのかをvruntimeを観測することで考えてみよ
<!--- end md --->

<!--- code w kernel=bash --->
for i in $(seq 0 3); do
  if [ ${i} = 0 ]; then
    taskset -c 2 nice -5 ./vruntime_rec 3 ;
  else
    taskset -c 2 ./vruntime_rec 3 ;
  fi > vr.${i} &
done
wait
<!--- end code --->

<!--- code w kernel=python ---> 
vruntime_vis([f"vr.{i}" for i in range(4)])
#vruntime_vis([f"vr.{i}" for i in range(4)], start_t=1.0, end_t=1.5)
<!--- end code --->


