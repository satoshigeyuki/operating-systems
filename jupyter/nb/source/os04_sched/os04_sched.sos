<!--- md --->

#* オペレーティングシステム 演習 04

#* スケジューリング

<!--- end md --->

<!--- md w --->

名前と学生証番号を書け. Enter your name and student ID.

 * 名前 Name:
 * 学生証番号 Student ID:

<!--- end md --->

<!--- md --->
# スケジューリング
<!--- end md --->

<!--- md --->

* スレッド(プロセス)が脇目もふらず実行をしているつもりでも, そのようなスレッドが(仮想)コア数以上あれば, それらすべてのスレッドが, 同時に実行されているはずはない. 
* OSは, 時折スレッドをCPUコア上で切り替えながら実行しているはずである. その様子を観測する実験をしてみよう.
<!--- end md --->

<!--- md --->

以下のプログラムは擬似コードで書けば以下のようなことをしている

```
 1: int main() {
 2:   t = 現在時刻();
 3:   while (10秒たつか記録する配列があふれるまで) {
 4:     t' = 現在時刻();
 5:     t'と, 最後に見た現在時刻(t)を比べる;
 6:     tとt'の差が非常に小さければ, 自分はtからt'までCPUが割り当てられていた,
 7:     そうでなければ, tからt'まで自分は走っていなかった
 8:     (CPUが他のスレッドに割り当てられていた)と考える;
 9:     t = t';
10:   }
11:   CPUが自分に割り当てられていたと考えられる時間帯を表示する;
12: }
```

* スレッドは実質的に時計を見る以外のことをせずにひたすら走り続けている
* したがってほんとんどの時, tとt'の差は小さいのだが稀に, そうでないことがある
* それはおそらくその間他のスレッドにCPUが割り当てられており自分はその時間帯OSによって止められていた場合に生ずる

<!--- end md --->

<!--- md --->

* 以下が実際のCコード

<!--- end md --->

<!--- code w kernel=python --->
%%writefile sched_rec.c
<!--- exec-include ./mk_version.py -DVER=1 nb/source/include/os04_sched/sched_rec.c --->
<!--- end code --->

<!--- code w kernel=bash --->
gcc -Wall -o sched_rec sched_rec.c
<!--- end code --->

<!--- md --->

* 以下は1秒ほど, 単独で走らせてみる例
* 1行の読み方は以下
```
プロセスID  区間開始時刻  区間終了時刻  CPU番号 区間の長さ
```
* なお, Jupyterのbash kernelのバグによって出力が出ない場合があるかもしれない(経験上, 最初の一回がそうなることが多い). そういうときは何度か実行してみてください

<!--- end md --->

<!--- code w kernel=bash --->
./sched_rec 1
<!--- end code --->

<!--- md ---> 

* 各行はひとつの, 連続してOSにCPUを与えられていた時間(区間)を表している
* もし上記の結果が1行しか表示されなければそれは, 約1秒間, まったく(正確には1ms以上連続して)他のスレッドにCPUを奪われずに走っていたということになる(最後の行がほぼ1秒であることを確認せよ)
* 2行以上に渡った場合, ある区間の終了時刻と次の区間の開始時刻の差を観察してみよ(最後の行を合計するとほぼ1秒になることを確認せよ)

<!--- end md --->

<!--- md --->

* 以下ではこのプロセスを複数同時に走らせると何が起きるかを観察, 可視化する
* その前に以下で, このJupyter環境(をホストしてるマシン)にいくつのCPU (正確には仮想コア)がつまれているかを見てみる

<!--- end md --->

<!--- code w kernel=bash --->
lscpu
<!--- end code --->

<!--- md --->

* 以下はシェルスクリプトで同時に4個, 3秒間このプロセスを走らせ, 結果はファイル sched.0, sched.1, sched.2, sched.3 に記録したもの

<!--- end md --->

<!--- code w kernel=bash --->
./sched_rec 3 > sched.0 | ./sched_rec 3 > sched.1 | ./sched_rec 3 > sched.2 | ./sched_rec 3 > sched.3
<!--- end code --->

<!--- md --->

* sched_vis は sched_rec の結果を可視化する関数
* 同時に結果は sched.svg という画像ファイルに保存される

<!--- end md --->

<!--- code w kernel=python --->
<!--- include nb/source/include/os04_sched/sched_vis.py --->
<!--- end code --->

<!--- md --->
* 以下で実際に可視化
* 以下は sched.0, sched.1, sched.2, sched.3 の4つのファイルを可視化する
* start_t, end_tを指定すれば可視化の開始時刻と終了時刻を指定できる(start_t=None, end_t=Noneにすると, それぞれファイル中に含まれる最小, 最大の時刻という意味)
<!--- end md --->

<!--- code w kernel=python --->
sched_vis(["sched.{}".format(i) for i in range(4)])
#sched_vis(["sched.{}".format(i) for i in range(4)], start_t=1.0, end_t=1.5)
<!--- end code --->

<!--- md --->

* 本題は, プロセスをさらに増やしたらどうなるかということ
* 上記の書き方で複数同時に走らせるのはタイプ量の限界を超えるので, シェルスクリプトのループを使う
* 以下は8個のプロセスを3秒間走らせる
* 記録はsched.0 ... sched.7 に記録される
<!--- end md --->

<!--- code w kernel=bash --->
for i in $(seq 0 7); do
  taskset -c 0-3 ./sched_rec 3 > sched.${i} &
done
wait
<!--- end code --->

<!--- md --->

* <font color="blue">実行し終えたら再び, 可視化せよ</font>

<!--- end md --->

<!--- code w kernel=python --->
#sched_vis(["sched.{}".format(i) for i in range(8)])
sched_vis(["sched.{}".format(i) for i in range(8)], start_t=1.0, end_t=1.5)
<!--- end code --->

<!--- md --->
* sched.svg というファイルが生成されているのでそれを開いて, 適宜拡大表示してみよ
<!--- end md --->


<!--- md --->

* 上記の taskset コマンドはプロセスを特定のCPUでしか実行できないようにするコマンド(man参照)
```
taskset -c 0-3 ./sched_rec 3
```
はCPU 0 ... 3 を使えということ. <font color="blue">tasksetの引数を変えて結果の違いを観察せよ</font>
* プロセス数を 使うCPU数より少し少ないあたりから, 使うCPU数x2くらいまで, <font color="blue">色々変えて結果の違いを観察せよ</font>

<!--- end md --->

<!--- md --->

* 注: 大勢で同じ環境を共有しているので, 複数の人が同時に同じ実験をすると自分は少数のプロセスしか立ち上げていなくても, 他の人のプロセスにCPUを奪われているかも知れない
* それ以外にもこのJupyterノートブック自身の処理やWebサーバの処理も行われるのでそれらにCPUを奪われることもある
* 従って, 同じ設定で実験しても結果は毎回同じとは限らない
* 自分だけの環境で走らせると結果の予測はしやすい

<!--- end md --->

